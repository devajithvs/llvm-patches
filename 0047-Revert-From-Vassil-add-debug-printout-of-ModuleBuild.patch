From 5b672be22dbed3e9b5bbe326fd7d65b4336c4115 Mon Sep 17 00:00:00 2001
From: Devajith Valaparambil Sreeramaswamy
 <devajith.valaparambil.sreeramaswamy@cern.ch>
Date: Thu, 31 Oct 2024 09:32:21 +0100
Subject: [PATCH 47/52] Revert "From Vassil: add (debug) printout of
 ModuleBuilder data structures."

This reverts commit 17017d90474721c591378ea333e80c768d4a04e2.
---
 .../include/clang/CodeGen/ModuleBuilder.h     |   3 -
 .../clang/lib/CodeGen/ModuleBuilder.cpp       | 117 ------------------
 2 files changed, 120 deletions(-)

diff --git a/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h b/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h
index d332a063ed..edacd82bf8 100644
--- a/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h
+++ b/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h
@@ -21,7 +21,6 @@ namespace llvm {
   class LLVMContext;
   class Module;
   class StringRef;
-  class raw_ostream;
 
   namespace vfs {
   class FileSystem;
@@ -94,8 +93,6 @@ public:
   ///   definition has been registered with this code generator.
   llvm::Constant *GetAddrOfGlobal(GlobalDecl decl, bool isForDefinition);
 
-  void print(llvm::raw_ostream& out);
-
   /// Create a new \c llvm::Module after calling HandleTranslationUnit. This
   /// enable codegen in interactive processing environments.
   llvm::Module* StartModule(llvm::StringRef ModuleName, llvm::LLVMContext &C);
diff --git a/interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp b/interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp
index bff90fd2b2..dbb6fd10d4 100644
--- a/interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp
+++ b/interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp
@@ -133,119 +133,6 @@ namespace clang {
       return Builder->GetAddrOfGlobal(global, ForDefinition_t(isForDefinition));
     }
 
-    void print(llvm::raw_ostream& out) {
-      out << "\n\nCodeGen:\n";
-      //llvm::SmallPtrSet<llvm::GlobalValue*, 10> WeakRefReferences;
-      out << " WeakRefReferences (llvm::SmallPtrSet<llvm::GlobalValue*, 10>)\n";
-      for(auto I = Builder->WeakRefReferences.begin(),
-            E = Builder->WeakRefReferences.end(); I != E; ++I) {
-        (*I)->print(out);
-        out << "\n";
-      }
-
-      //llvm::StringMap<GlobalDecl> DeferredDecls;
-      out << " DeferredDecls (llvm::StringMap<GlobalDecl>)\n";
-      for(auto I = Builder->DeferredDecls.begin(),
-            E = Builder->DeferredDecls.end(); I != E; ++I) {
-        out << I->first.str().c_str();
-        I->second.getDecl()->print(out);
-        out << "\n";
-      }
-
-      //std::vector<DeferredGlobal> DeferredDeclsToEmit;
-      out << " DeferredDeclsToEmit (std::vector<DeferredGlobal>)\n";
-      for(auto I = Builder->DeferredDeclsToEmit.begin(),
-            E = Builder->DeferredDeclsToEmit.end(); I != E; ++I) {
-        I->getDecl()->print(out);
-        out << "\n";
-      }
-
-      //std::vector<GlobalDecl> Aliases;
-      out << " Aliases (std::vector<GlobalDecl>)\n";
-      for(auto I = Builder->Aliases.begin(),
-            E = Builder->Aliases.end(); I != E; ++I) {
-        I->getDecl()->print(out);
-        out << "\n";
-      }
-      //typedef llvm::StringMap<llvm::TrackingVH<llvm::Constant> >
-      // ReplacementsTy;
-      //ReplacementsTy Replacements;
-      out
-        << " Replacements (llvm::StringMap<llvm::TrackingVH<llvm::Constant>>\n";
-      for(auto I = Builder->Replacements.begin(),
-            E = Builder->Replacements.end(); I != E; ++I) {
-        out << I->first.str().c_str();
-        (*I->second).print(out);
-        out << "\n";
-      }
-
-      //std::vector<const CXXRecordDecl*> DeferredVTables;
-      out << " DeferredVTables (std::vector<const CXXRecordDecl*>\n";
-      for(auto I = Builder->DeferredVTables.begin(),
-            E = Builder->DeferredVTables.end(); I != E; ++I) {
-        (*I)->print(out);
-        out << "\n";
-      }
-
-      //std::vector<llvm::WeakVH> LLVMUsed;
-      out << " LLVMUsed (std::vector<llvm::WeakVH> >\n";
-      for(auto I = Builder->LLVMUsed.begin(),
-            E = Builder->LLVMUsed.end(); I != E; ++I) {
-        (*I)->print(out);
-        out << "\n";
-      }
-
-      // typedef std::vector<std::pair<llvm::Constant*, int> > CtorList;
-      //CtorList GlobalCtors;
-      out << " GlobalCtors (std::vector<std::pair<llvm::Constant*, int> >\n";
-      for(auto I = Builder->GlobalCtors.begin(),
-            E = Builder->GlobalCtors.end(); I != E; ++I) {
-        out << I->Initializer << " : " << I->AssociatedData;
-        out << "\n";
-      }
-
-      //CtorList GlobalDtors;
-      out << " GlobalDtors (std::vector<std::pair<llvm::Constant*, int> >\n";
-      for(auto I = Builder->GlobalDtors.begin(),
-            E = Builder->GlobalDtors.end(); I != E; ++I) {
-        out << I->Initializer << " : " << I->AssociatedData;
-        out << "\n";
-      }
-
-      //llvm::DenseMap<GlobalDecl, StringRef> MangledDeclNames;
-      //std::vector<llvm::Constant*> Annotations;
-      //llvm::StringMap<llvm::Constant*> AnnotationStrings;
-      //llvm::StringMap<llvm::Constant*> CFConstantStringMap;
-      //llvm::StringMap<llvm::GlobalVariable*> ConstantStringMap;
-      out << " ConstantStringMap (llvm::DenseMap<llvm::Constant *, "
-             "llvm::GlobalVariable *>)\n";
-      for(auto I = Builder->ConstantStringMap.begin(),
-            E = Builder->ConstantStringMap.end(); I != E; ++I) {
-        I->first->print(out);
-        I->second->print(out);
-        out << "\n";
-      }
-
-      //llvm::DenseMap<const Decl*, llvm::Constant *> StaticLocalDeclMap;
-      //llvm::DenseMap<const Decl*, llvm::GlobalVariable*> StaticLocalDeclGuardMap;
-      //llvm::DenseMap<const Expr*, llvm::Constant *> MaterializedGlobalTemporaryMap;
-      //llvm::DenseMap<QualType, llvm::Constant *> AtomicSetterHelperFnMap;
-      //llvm::DenseMap<QualType, llvm::Constant *> AtomicGetterHelperFnMap;
-      //llvm::DenseMap<QualType, llvm::Constant *> TypeDescriptorMap;
-      //StaticExternCMap StaticExternCValues;
-      //std::vector<std::pair<const VarDecl *, llvm::GlobalVariable *> >
-      // CXXThreadLocals;
-      //std::vector<llvm::Constant*> CXXThreadLocalInits;
-      //std::vector<llvm::Constant*> CXXGlobalInits;
-      //llvm::DenseMap<const Decl*, unsigned> DelayedCXXInitPosition;
-      //SmallVector<GlobalInitData, 8> PrioritizedCXXGlobalInits;
-      //std::vector<std::pair<llvm::WeakVH,llvm::Constant*> > CXXGlobalDtors;
-      //llvm::SetVector<clang::Module *> ImportedModules;
-      //SmallVector<llvm::Value *, 16> LinkerOptionsMetadata;
-      //
-      out.flush();
-    }
-
     llvm::Module *StartModule(llvm::StringRef ModuleName,
                               llvm::LLVMContext &C) {
       assert(!M && "Replacing existing Module?");
@@ -468,10 +355,6 @@ llvm::Constant *CodeGenerator::GetAddrOfGlobal(GlobalDecl global,
            ->GetAddrOfGlobal(global, isForDefinition);
 }
 
-void CodeGenerator::print(llvm::raw_ostream& out) {
-  static_cast<CodeGeneratorImpl*>(this)->print(out);
-}
-
 llvm::Module *CodeGenerator::StartModule(llvm::StringRef ModuleName,
                                          llvm::LLVMContext &C) {
   return static_cast<CodeGeneratorImpl*>(this)->StartModule(ModuleName, C);
-- 
2.43.5

