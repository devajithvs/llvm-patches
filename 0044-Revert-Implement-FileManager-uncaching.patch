From 1aee8eef9a70c0f68971f7611fab5ec36ba7aa45 Mon Sep 17 00:00:00 2001
From: Devajith Valaparambil Sreeramaswamy
 <devajith.valaparambil.sreeramaswamy@cern.ch>
Date: Thu, 31 Oct 2024 09:32:20 +0100
Subject: [PATCH 44/51] Revert "Implement FileManager uncaching."

This reverts commit 4e8b00c23e829b700e94551c535e8fbe783642a5.
---
 .../clang/include/clang/Basic/FileManager.h   |  9 ----
 .../clang/include/clang/Basic/SourceManager.h |  4 +-
 .../clang/lib/Basic/FileManager.cpp           | 41 ++-----------------
 .../clang/lib/Basic/SourceManager.cpp         | 11 -----
 4 files changed, 4 insertions(+), 61 deletions(-)

diff --git a/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h b/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
index 5aa91eebc2..56cb093dd8 100644
--- a/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
+++ b/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
@@ -32,7 +32,6 @@
 #include <map>
 #include <memory>
 #include <string>
-#include <set>
 
 namespace llvm {
 
@@ -108,11 +107,6 @@ class FileManager : public RefCountedBase<FileManager> {
   /// The canonical names of files and directories .
   llvm::DenseMap<const void *, llvm::StringRef> CanonicalNames;
 
-  std::set<const FileEntry*> FileEntriesToReread;
-
-  /// The canonical names of directories.
-  llvm::DenseMap<const DirectoryEntry *, llvm::StringRef> CanonicalDirNames;
-
   /// Storage for canonical names that we have computed.
   llvm::BumpPtrAllocator CanonicalNameStorage;
 
@@ -305,9 +299,6 @@ public:
   std::error_code getNoncachedStatValue(StringRef Path,
                                         llvm::vfs::Status &Result);
 
-  /// Remove the real file \p Entry from the cache.
-  void invalidateCache(FileEntryRef Entry);
-
   /// If path is not absolute and FileSystemOptions set the working
   /// directory, the path is modified to be relative to the given
   /// working directory.
diff --git a/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h b/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
index 57f5d4f385..d2ece14da0 100644
--- a/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
+++ b/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
@@ -256,7 +256,7 @@ public:
 
   /// Set the buffer.
   void setBuffer(std::unique_ptr<llvm::MemoryBuffer> B) {
-    IsBufferInvalid = !B;
+    IsBufferInvalid = false;
     Buffer = std::move(B);
   }
 
@@ -841,8 +841,6 @@ public:
 
   void clearIDTables();
 
-  void invalidateCache(FileID FID);
-
   /// Initialize this source manager suitably to replay the compilation
   /// described by \p Old. Requires that \p Old outlive \p *this.
   void initializeForReplay(const SourceManager &Old);
diff --git a/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp b/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
index 6ac6783839..974c8c2259 100644
--- a/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
+++ b/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp
@@ -209,25 +209,7 @@ FileManager::getFileRef(StringRef Filename, bool openFile, bool CacheFailure) {
   // See if there is already an entry in the map.
   auto SeenFileInsertResult =
       SeenFileEntries.insert({Filename, std::errc::no_such_file_or_directory});
-
-  auto *NamedFileEnt = &*SeenFileInsertResult.first;
-
-  const FileEntry *StaleFileEntry = 0;
-  bool needsRereading = false;
-  if (NamedFileEnt && NamedFileEnt->getValue()) {
-    FileEntryRef::MapValue Value = *NamedFileEnt->getValue();
-    if (Value.V.is<FileEntry *>()) {
-      auto found = FileEntriesToReread.find(Value.V.get<FileEntry*>());
-      if (found != FileEntriesToReread.end()) {
-        needsRereading = true;
-        StaleFileEntry = *found;
-        FileEntriesToReread.erase(found);
-      }
-    }
-  }
-
-  // See if there is already an entry in the map.
-  if (!SeenFileInsertResult.second && !needsRereading) {
+  if (!SeenFileInsertResult.second) {
     if (!SeenFileInsertResult.first->second)
       return llvm::errorCodeToError(
           SeenFileInsertResult.first->second.getError());
@@ -236,6 +218,8 @@ FileManager::getFileRef(StringRef Filename, bool openFile, bool CacheFailure) {
 
   // We've not seen this before. Fill it in.
   ++NumFileCacheMisses;
+  auto *NamedFileEnt = &*SeenFileInsertResult.first;
+  assert(!NamedFileEnt->second && "should be newly-created");
 
   // Get the null-terminated file name as stored as the key of the
   // SeenFileEntries map.
@@ -381,20 +365,6 @@ FileManager::getFileRef(StringRef Filename, bool openFile, bool CacheFailure) {
     // We should still fill the path even if we aren't opening the file.
     fillRealPathName(UFE, InterndFileName);
   }
-
-  if (StaleFileEntry) {
-    // Find occurrences of old FileEntry; update with new one:
-    for (auto& fe: SeenFileEntries) {
-      if (fe.getValue()) {
-        FileEntryRef::MapValue Value = *fe.getValue();
-        if (Value.V.is<FileEntry *>()
-            && Value.V.get<FileEntry*>() == StaleFileEntry) {
-          fe.setValue(FileEntryRef::MapValue(*UFE, DirInfo));
-        }
-      }
-    }
-  }
-
   return ReturnedRef;
 }
 
@@ -641,11 +611,6 @@ FileManager::getNoncachedStatValue(StringRef Path,
   return std::error_code();
 }
 
-void FileManager::invalidateCache(FileEntryRef Entry) {
-  assert(Entry && "Cannot invalidate a NULL FileEntry");
-  FileEntriesToReread.insert(Entry);
-}
-
 void FileManager::GetUniqueIDMapping(
     SmallVectorImpl<OptionalFileEntryRef> &UIDToFiles) const {
   UIDToFiles.clear();
diff --git a/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp b/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
index e3af7ff58a..37734d3b10 100644
--- a/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
+++ b/interpreter/llvm-project/clang/lib/Basic/SourceManager.cpp
@@ -358,17 +358,6 @@ bool SourceManager::isMainFile(const FileEntry &SourceFile) {
   return false;
 }
 
-void SourceManager::invalidateCache(FileID FID) {
-  OptionalFileEntryRef Entry = getFileEntryRefForID(FID);
-  if (!Entry)
-    return;
-  if (ContentCache *&E = FileInfos[*Entry]) {
-    E->setBuffer(nullptr);
-    E = 0;
-  }
-  getFileManager().invalidateCache(*Entry);
-}
-
 void SourceManager::initializeForReplay(const SourceManager &Old) {
   assert(MainFileID.isInvalid() && "expected uninitialized SourceManager");
 
-- 
2.43.5

