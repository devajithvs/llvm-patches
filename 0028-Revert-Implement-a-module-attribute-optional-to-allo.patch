From 0bddd25f61a8e70c38369aaf62b54870e8f08f70 Mon Sep 17 00:00:00 2001
From: Devajith Valaparambil Sreeramaswamy
 <devajith.valaparambil.sreeramaswamy@cern.ch>
Date: Thu, 31 Oct 2024 09:32:19 +0100
Subject: [PATCH 28/52] Revert "Implement a module attribute 'optional' to
 allow missing headers."

This reverts commit d8163b33f5f17b3be59dd5eca11698c5e1d5ecd7.
---
 .../clang/include/clang/Basic/Module.h            |  3 ---
 .../clang/include/clang/Lex/ModuleMap.h           |  5 +----
 .../llvm-project/clang/lib/Basic/Module.cpp       |  3 +--
 .../llvm-project/clang/lib/Lex/ModuleMap.cpp      | 15 +--------------
 4 files changed, 3 insertions(+), 23 deletions(-)

diff --git a/interpreter/llvm-project/clang/include/clang/Basic/Module.h b/interpreter/llvm-project/clang/include/clang/Basic/Module.h
index a1324fd5a7..62786e3ac8 100644
--- a/interpreter/llvm-project/clang/include/clang/Basic/Module.h
+++ b/interpreter/llvm-project/clang/include/clang/Basic/Module.h
@@ -371,9 +371,6 @@ public:
   LLVM_PREFERRED_TYPE(bool)
   unsigned NoUndeclaredIncludes : 1;
 
-  /// Whether the submodule is allowed to have missing headers.
-  unsigned IsOptional: 1;
-
   /// Whether this module came from a "private" module map, found next
   /// to a regular (public) module map.
   LLVM_PREFERRED_TYPE(bool)
diff --git a/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h b/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
index 33ab10889f..867cb6eab4 100644
--- a/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
+++ b/interpreter/llvm-project/clang/include/clang/Lex/ModuleMap.h
@@ -248,12 +248,9 @@ private:
     LLVM_PREFERRED_TYPE(bool)
     unsigned NoUndeclaredIncludes : 1;
 
-    /// Whether we can have a submodule with missing header files.
-    unsigned IsOptional : 1;
-
     Attributes()
         : IsSystem(false), IsExternC(false), IsExhaustive(false),
-          NoUndeclaredIncludes(false), IsOptional(false) {}
+          NoUndeclaredIncludes(false) {}
   };
 
   /// A directory for which framework modules can be inferred.
diff --git a/interpreter/llvm-project/clang/lib/Basic/Module.cpp b/interpreter/llvm-project/clang/lib/Basic/Module.cpp
index aec175e11d..0dac8748a9 100644
--- a/interpreter/llvm-project/clang/lib/Basic/Module.cpp
+++ b/interpreter/llvm-project/clang/lib/Basic/Module.cpp
@@ -43,7 +43,7 @@ Module::Module(StringRef Name, SourceLocation DefinitionLoc, Module *Parent,
       IsSystem(false), IsExternC(false), IsInferred(false),
       InferSubmodules(false), InferExplicitSubmodules(false),
       InferExportWildcard(false), ConfigMacrosExhaustive(false),
-      NoUndeclaredIncludes(false), IsOptional(false), ModuleMapIsPrivate(false),
+      NoUndeclaredIncludes(false), ModuleMapIsPrivate(false),
       NamedModuleHasInit(true), NameVisibility(Hidden) {
   if (Parent) {
     IsAvailable = Parent->isAvailable();
@@ -51,7 +51,6 @@ Module::Module(StringRef Name, SourceLocation DefinitionLoc, Module *Parent,
     IsSystem = Parent->IsSystem;
     IsExternC = Parent->IsExternC;
     NoUndeclaredIncludes = Parent->NoUndeclaredIncludes;
-    IsOptional = Parent->IsOptional;
     ModuleMapIsPrivate = Parent->ModuleMapIsPrivate;
 
     Parent->SubModuleIndex[Name] = Parent->SubModules.size();
diff --git a/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp b/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp
index 737a493fa2..10c475f617 100644
--- a/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp
+++ b/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp
@@ -317,8 +317,6 @@ void ModuleMap::resolveHeader(Module *Mod,
     // this was supposed to modularize the builtin header alone.
   } else if (Header.Kind == Module::HK_Excluded) {
     // Ignore missing excluded header files. They're optional anyway.
-  } else if (Mod->IsOptional) {
-     // Optional submodules can have missing headers.
   } else {
     // If we find a module that has a missing header, we mark this module as
     // unavailable and store the header directive for displaying diagnostics.
@@ -1101,7 +1099,6 @@ Module *ModuleMap::inferFrameworkModule(DirectoryEntryRef FrameworkDir,
   Result->IsExternC |= Attrs.IsExternC;
   Result->ConfigMacrosExhaustive |= Attrs.IsExhaustive;
   Result->NoUndeclaredIncludes |= Attrs.NoUndeclaredIncludes;
-  Result->IsOptional |= Attrs.IsOptional;
   Result->Directory = FrameworkDir;
 
   // Chop off the first framework bit, as that is implied.
@@ -1844,10 +1841,7 @@ namespace {
     AT_exhaustive,
 
     /// The 'no_undeclared_includes' attribute.
-    AT_no_undeclared_includes,
-
-    /// The 'optional' attribute.
-    AT_optional
+    AT_no_undeclared_includes
   };
 
 } // namespace
@@ -2124,8 +2118,6 @@ void ModuleMapParser::parseModuleDecl() {
     ActiveModule->IsExternC = true;
   if (Attrs.NoUndeclaredIncludes)
     ActiveModule->NoUndeclaredIncludes = true;
-  if (Attrs.IsOptional)
-    ActiveModule->IsOptional = true;
   ActiveModule->Directory = Directory;
 
   StringRef MapFileName(ModuleMapFile.getName());
@@ -3028,7 +3020,6 @@ bool ModuleMapParser::parseOptionalAttributes(Attributes &Attrs) {
           .Case("exhaustive", AT_exhaustive)
           .Case("extern_c", AT_extern_c)
           .Case("no_undeclared_includes", AT_no_undeclared_includes)
-          .Case("optional", AT_optional)
           .Case("system", AT_system)
           .Default(AT_unknown);
     switch (Attribute) {
@@ -3052,10 +3043,6 @@ bool ModuleMapParser::parseOptionalAttributes(Attributes &Attrs) {
     case AT_no_undeclared_includes:
       Attrs.NoUndeclaredIncludes = true;
       break;
-
-    case AT_optional:
-      Attrs.IsOptional = true;
-      break;
     }
     consumeToken();
 
-- 
2.43.5

