From 29f821ba86e2f933de33be8b985d2d3bd3f7df89 Mon Sep 17 00:00:00 2001
From: Devajith Valaparambil Sreeramaswamy
 <devajith.valaparambil.sreeramaswamy@cern.ch>
Date: Thu, 31 Oct 2024 09:32:19 +0100
Subject: [PATCH 28/51] Revert "[cxxmodules] Don't complain when modulemap for
 implicit modules has changed"

This reverts commit 137f8dedd259fbbd2d91018e267a9126968c487f.
---
 .../clang/lib/Serialization/ASTReader.cpp     | 51 ++-----------------
 1 file changed, 5 insertions(+), 46 deletions(-)

diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp
index b35ea14d3b..490b8cb10a 100644
--- a/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp
+++ b/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp
@@ -3076,27 +3076,6 @@ ASTReader::ReadControlBlock(ModuleFile &F,
           return Missing;
         }
 
-        // Check if ImportedFile exists on disk
-        if (!llvm::sys::fs::is_directory(ImportedFile)) {
-          StringRef ModuleName = llvm::sys::path::filename(ImportedFile.c_str());
-          ModuleName.consume_back(".pcm");
-          // Get clang::Module pointer by looking up the module name
-          HeaderSearch &HS = PP.getHeaderSearchInfo();
-          Module *M = HS.lookupModule(ModuleName, SourceLocation(),
-                                      /*AllowSearch*/ true,
-                                      /*AllowExtraModuleMapSearch*/ true);
-          if (M) {
-            std::string Path = HS.getPrebuiltModuleFileName(M->Name);
-                           if (Path.empty())
-              Path = HS.getCachedModuleFileName(M->Name,
-                   HS.getModuleMap().getModuleMapFileForUniquing(M)->getName());
-            // FIXME: Add a hash comparison to check if ImportedFile's hash and the
-            // new Modules Path's hash matches or not.
-            if (!Path.empty())
-              ImportedFile = Path;
-          }
-        }
-
         // If our client can't cope with us being out of date, we can't cope with
         // our dependency being missing.
         unsigned Capabilities = ClientLoadCapabilities;
@@ -4087,31 +4066,11 @@ void ASTReader::ReadModuleOffsetMap(ModuleFile &F) const {
                           ? ModuleMgr.lookupByModuleName(Name)
                           : ModuleMgr.lookupByFileName(Name));
     if (!OM) {
-      StringRef ModuleName = llvm::sys::path::filename(Name);
-      ModuleName.consume_back(".pcm");
-      HeaderSearch &HS = PP.getHeaderSearchInfo();
-      Module *M = HS.lookupModule(ModuleName, SourceLocation(),
-                                  /*AllowSearch*/ true,
-                                  /*AllowExtraModuleMapSearch*/ true);
-      std::string Path;
-      // If module definition exists in modulemap, search the modulepath in HeaderSearchInfo
-      if (M) {
-        Path = HS.getPrebuiltModuleFileName(M->Name);
-        if (Path.empty())
-          Path = HS.getCachedModuleFileName(M->Name,
-                   HS.getModuleMap().getModuleMapFileForUniquing(M)->getName());
-
-      }
-
-      StringRef NewName = StringRef(Path);
-      OM = ModuleMgr.lookupByFileName(NewName);
-      if (!OM) {
-        std::string Msg =
-           "SourceLocation remap refers to unknown module, cannot find ";
-        Msg.append(std::string(NewName));
-        Error(Msg);
-        return;
-      }
+      std::string Msg =
+          "SourceLocation remap refers to unknown module, cannot find ";
+      Msg.append(std::string(Name));
+      Error(Msg);
+      return;
     }
 
     SourceLocation::UIntTy SLocOffset =
-- 
2.43.5

