From 1eca9ba670e7035d53deeb5a5c1d1abb942660ff Mon Sep 17 00:00:00 2001
From: Devajith Valaparambil Sreeramaswamy
 <devajith.valaparambil.sreeramaswamy@cern.ch>
Date: Thu, 31 Oct 2024 09:32:18 +0100
Subject: [PATCH 16/51] Revert "Update the DeclContext used for lookup to point
 to the definition."

This reverts commit 89294883f0642296ce22ee2a9d9bb72d36ed0b2f.
---
 .../clang/include/clang/Sema/Sema.h           |  2 +-
 .../clang/lib/Sema/SemaCXXScopeSpec.cpp       | 20 ++++---------------
 .../llvm-project/clang/lib/Sema/SemaDecl.cpp  | 11 +++-------
 .../clang/lib/Sema/SemaDeclCXX.cpp            |  2 +-
 .../clang/lib/Sema/SemaExprCXX.cpp            |  3 +--
 .../clang/lib/Sema/SemaTemplate.cpp           |  5 -----
 6 files changed, 10 insertions(+), 33 deletions(-)

diff --git a/interpreter/llvm-project/clang/include/clang/Sema/Sema.h b/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
index 8404d81bf4..12a0ec36c4 100644
--- a/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
+++ b/interpreter/llvm-project/clang/include/clang/Sema/Sema.h
@@ -7065,7 +7065,7 @@ public:
   StmtResult ActOnFinishFullStmt(Stmt *Stmt);
 
   // Marks SS invalid if it represents an incomplete type.
-  bool RequireCompleteDeclContext(CXXScopeSpec &SS, DeclContext *&DC);
+  bool RequireCompleteDeclContext(CXXScopeSpec &SS, DeclContext *DC);
   // Complete an enum decl, maybe without a scope spec.
   bool RequireCompleteEnumDecl(EnumDecl *D, SourceLocation L,
                                CXXScopeSpec *SS = nullptr);
diff --git a/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp b/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp
index 6dd9528a14..44a40215b9 100644
--- a/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp
+++ b/interpreter/llvm-project/clang/lib/Sema/SemaCXXScopeSpec.cpp
@@ -216,7 +216,7 @@ CXXRecordDecl *Sema::getCurrentInstantiationOf(NestedNameSpecifier *NNS) {
 /// a class template specialization that is not a complete type, we
 /// will attempt to instantiate that class template.
 bool Sema::RequireCompleteDeclContext(CXXScopeSpec &SS,
-                                      DeclContext *&DC) {
+                                      DeclContext *DC) {
   assert(DC && "given null context");
 
   TagDecl *tag = dyn_cast<TagDecl>(DC);
@@ -242,12 +242,6 @@ bool Sema::RequireCompleteDeclContext(CXXScopeSpec &SS,
   // The type must be complete.
   if (RequireCompleteType(loc, type, diag::err_incomplete_nested_name_spec,
                           SS.getRange())) {
-    // The actual information about the decl may have been loaded via an
-    // external source that created a new AST node/decl for the definition
-    // rather than reusing the one we had (DC) like the ASTReader does.
-    // To avoid the caller to continue using the still incomplete decl, let's
-    // set it to the definition.
-    DC = tag->getDefinition();
     SS.SetInvalid(SS.getRange());
     return true;
   }
@@ -516,15 +510,9 @@ bool Sema::BuildCXXNestedNameSpecifier(Scope *S, NestedNameSpecInfo &IdInfo,
     // nested-name-specifier.
 
     // The declaration context must be complete.
-    if (!LookupCtx->isDependentContext()) {
-      if (RequireCompleteDeclContext(SS, LookupCtx)) {
-        return true;
-      } else if (TagDecl* TD = dyn_cast<TagDecl>(LookupCtx)) {
-        // Update the DeclContext to point to the Tag definition.
-        LookupCtx = TD->getDefinition();
-      }
-    }
-
+    if (!LookupCtx->isDependentContext() &&
+        RequireCompleteDeclContext(SS, LookupCtx))
+      return true;
 
     LookupQualifiedName(Found, LookupCtx);
 
diff --git a/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp b/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp
index 30ae06a323..f5bb3e0b42 100644
--- a/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp
+++ b/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp
@@ -399,14 +399,9 @@ ParsedType Sema::getTypeName(const IdentifierInfo &II, SourceLocation NameLoc,
       return nullptr;
     }
 
-    if (!LookupCtx->isDependentContext()) {
-      if (RequireCompleteDeclContext(*SS, LookupCtx)) {
-        return nullptr;
-      } else if (TagDecl* TD = dyn_cast<TagDecl>(LookupCtx)) {
-        // Update the DeclContext to point to the Tag definition.
-        LookupCtx = TD->getDefinition();
-      }
-    }
+    if (!LookupCtx->isDependentContext() &&
+        RequireCompleteDeclContext(*SS, LookupCtx))
+      return nullptr;
   }
 
   // FIXME: LookupNestedNameSpecifierName isn't the right kind of
diff --git a/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp b/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp
index 5607142798..df5bd55e7c 100644
--- a/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp
+++ b/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp
@@ -13325,7 +13325,7 @@ bool Sema::CheckUsingDeclQualifier(SourceLocation UsingLoc, bool HasTypename,
     if (Cxx20Enumerator)
       return false; // OK
 
-    DeclContext *RD = NamedContext
+    auto *RD = NamedContext
                    ? cast<CXXRecordDecl>(NamedContext->getRedeclContext())
                    : nullptr;
     if (RD && !RequireCompleteDeclContext(const_cast<CXXScopeSpec &>(SS), RD)) {
diff --git a/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp b/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp
index c94b1e1095..953bfe484a 100644
--- a/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp
+++ b/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp
@@ -106,8 +106,7 @@ ParsedType Sema::getConstructorName(IdentifierInfo &II,
     return ParsedType::make(T);
   }
 
-  DeclContext *DC = CurClass;
-  if (SS.isNotEmpty() && RequireCompleteDeclContext(SS, DC))
+  if (SS.isNotEmpty() && RequireCompleteDeclContext(SS, CurClass))
     return ParsedType();
 
   // Find the injected-class-name declaration. Note that we make no attempt to
diff --git a/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp b/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp
index a700a73ebb..850d28ce56 100644
--- a/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp
+++ b/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp
@@ -432,11 +432,6 @@ bool Sema::LookupTemplateName(LookupResult &Found,
     // The declaration context must be complete.
     if (LookupCtx && RequireCompleteDeclContext(SS, LookupCtx))
       return true;
-
-    if (TagDecl* TD = dyn_cast_or_null<TagDecl>(LookupCtx)) {
-      // Update the DeclContext to point to the Tag definition.
-      LookupCtx = TD->getDefinition();
-    }
   }
 
   bool ObjectTypeSearchedInScope = false;
-- 
2.43.5

