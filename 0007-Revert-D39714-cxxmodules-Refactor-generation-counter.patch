From dbe1f236726a78b44525cb091e18d45f4da883a1 Mon Sep 17 00:00:00 2001
From: Devajith Valaparambil Sreeramaswamy
 <devajith.valaparambil.sreeramaswamy@cern.ch>
Date: Thu, 31 Oct 2024 09:32:17 +0100
Subject: [PATCH 07/52] Revert "[D39714][cxxmodules] Refactor generation
 counter in LLVM"

This reverts commit ca3b959de1d881e9e297d604910e181168e26fcc.
---
 .../clang/include/clang/AST/ASTContext.h      | 15 +-------------
 .../include/clang/AST/ExternalASTSource.h     | 14 +++++--------
 .../include/clang/Serialization/ASTReader.h   |  6 ------
 .../clang/lib/AST/ExternalASTSource.cpp       | 20 ++++++++++++++-----
 .../clang/lib/Serialization/ASTReader.cpp     | 13 ++++++------
 5 files changed, 28 insertions(+), 40 deletions(-)

diff --git a/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h b/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h
index ce2c204466..3e46a5da3f 100644
--- a/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h
+++ b/interpreter/llvm-project/clang/include/clang/AST/ASTContext.h
@@ -255,10 +255,6 @@ class ASTContext : public RefCountedBase<ASTContext> {
                                      ASTContext&>
     SubstTemplateTemplateParmPacks;
 
-  /// Generation number for this external AST source. Must be increased
-  /// whenever we might have added new redeclarations for existing decls.
-  uint32_t CurrentGeneration = 0;
-
   /// The set of nested name specifiers.
   ///
   /// This set is managed by the NestedNameSpecifier class.
@@ -690,15 +686,6 @@ public:
   /// use ParentMapContext::getParents() directly.
   template <typename NodeT> DynTypedNodeList getParents(const NodeT &Node);
 
-  uint32_t getGeneration() const { return CurrentGeneration; }
-  uint32_t incrementGeneration() {
-    uint32_t OldGeneration = CurrentGeneration;
-    CurrentGeneration++;
-    assert(CurrentGeneration > OldGeneration &&
-           "Overflowed generation counter");
-    return OldGeneration;
-  }
-
   const clang::PrintingPolicy &getPrintingPolicy() const {
     return PrintingPolicy;
   }
@@ -3497,7 +3484,7 @@ typename clang::LazyGenerationalUpdatePtr<Owner, T, Update>::ValueType
   // include ASTContext.h. We explicitly instantiate it for all relevant types
   // in ASTContext.cpp.
   if (auto *Source = Ctx.getExternalSource())
-    return new (Ctx) LazyData(&Ctx, Source, Value);
+    return new (Ctx) LazyData(Source, Value);
   return Value;
 }
 
diff --git a/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h b/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
index a8aa5d993c..8e573965b0 100644
--- a/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
+++ b/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
@@ -90,7 +90,7 @@ public:
   /// Get the current generation of this AST source. This number
   /// is incremented each time the AST source lazily extends an existing
   /// entity.
-  uint32_t getGeneration(const ASTContext &C) const;
+  uint32_t getGeneration() const { return CurrentGeneration; }
 
   /// Resolve a declaration ID into a declaration, potentially
   /// building a new declaration.
@@ -397,14 +397,12 @@ struct LazyGenerationalUpdatePtr {
   /// A cache of the value of this pointer, in the most recent generation in
   /// which we queried it.
   struct LazyData {
-    const ASTContext *Context;
     ExternalASTSource *ExternalSource;
     uint32_t LastGeneration = 0;
     T LastValue;
 
-    LazyData(const ASTContext *Context, ExternalASTSource *Source, T Value)
-        : Context(Context), ExternalSource(Source), LastGeneration(0),
-          LastValue(Value) {}
+    LazyData(ExternalASTSource *Source, T Value)
+        : ExternalSource(Source), LastValue(Value) {}
   };
 
   // Our value is represented as simply T if there is no external AST source.
@@ -446,10 +444,8 @@ public:
   /// Get the value of this pointer, updating its owner if necessary.
   T get(Owner O) {
     if (auto *LazyVal = Value.template dyn_cast<LazyData *>()) {
-      if (LazyVal->LastGeneration !=
-          LazyVal->ExternalSource->getGeneration(*LazyVal->Context)) {
-        LazyVal->LastGeneration =
-            LazyVal->ExternalSource->getGeneration(*LazyVal->Context);
+      if (LazyVal->LastGeneration != LazyVal->ExternalSource->getGeneration()) {
+        LazyVal->LastGeneration = LazyVal->ExternalSource->getGeneration();
         (LazyVal->ExternalSource->*Update)(O);
       }
       return LazyVal->LastValue;
diff --git a/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h b/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
index 2dab1ea863..1362e736b1 100644
--- a/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
+++ b/interpreter/llvm-project/clang/include/clang/Serialization/ASTReader.h
@@ -1362,12 +1362,6 @@ private:
         : Mod(Mod), ImportedBy(ImportedBy), ImportLoc(ImportLoc) {}
   };
 
-  uint32_t getGenerationOrNull() const {
-    if (ContextObj)
-      return getGeneration(*ContextObj);
-    return 0u;
-  }
-
   ASTReadResult ReadASTCore(StringRef FileName, ModuleKind Type,
                             SourceLocation ImportLoc, ModuleFile *ImportedBy,
                             SmallVectorImpl<ImportedModule> &Loaded,
diff --git a/interpreter/llvm-project/clang/lib/AST/ExternalASTSource.cpp b/interpreter/llvm-project/clang/lib/AST/ExternalASTSource.cpp
index fbb1114a6e..090ef02aa4 100644
--- a/interpreter/llvm-project/clang/lib/AST/ExternalASTSource.cpp
+++ b/interpreter/llvm-project/clang/lib/AST/ExternalASTSource.cpp
@@ -30,10 +30,6 @@ char ExternalASTSource::ID;
 
 ExternalASTSource::~ExternalASTSource() = default;
 
-uint32_t ExternalASTSource::getGeneration(const ASTContext &C) const {
-  return C.getGeneration();
-}
-
 std::optional<ASTSourceDescriptor>
 ExternalASTSource::getSourceDescriptor(unsigned ID) {
   return std::nullopt;
@@ -113,5 +109,19 @@ void ExternalASTSource::FindExternalLexicalDecls(
 void ExternalASTSource::getMemoryBufferSizes(MemoryBufferSizes &sizes) const {}
 
 uint32_t ExternalASTSource::incrementGeneration(ASTContext &C) {
-  return C.incrementGeneration();
+  uint32_t OldGeneration = CurrentGeneration;
+
+  // Make sure the generation of the topmost external source for the context is
+  // incremented. That might not be us.
+  auto *P = C.getExternalSource();
+  if (P && P != this)
+    CurrentGeneration = P->incrementGeneration(C);
+  else {
+    // FIXME: Only bump the generation counter if the current generation number
+    // has been observed?
+    if (!++CurrentGeneration)
+      llvm::report_fatal_error("generation counter overflowed", false);
+  }
+
+  return OldGeneration;
 }
diff --git a/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp b/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp
index 01720460d3..64fc3ea3af 100644
--- a/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp
+++ b/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp
@@ -2265,7 +2265,7 @@ void ASTReader::markIdentifierUpToDate(IdentifierInfo *II) {
 
   // Update the generation for this identifier.
   if (getContext().getLangOpts().Modules)
-    IdentifierGeneration[II] = getGenerationOrNull();
+    IdentifierGeneration[II] = getGeneration();
 }
 
 void ASTReader::resolvePendingMacro(IdentifierInfo *II,
@@ -4764,10 +4764,11 @@ ASTReader::ReadASTCore(StringRef FileName,
                        unsigned ClientLoadCapabilities) {
   ModuleFile *M;
   std::string ErrorStr;
-  ModuleManager::AddModuleResult AddResult =
-      ModuleMgr.addModule(FileName, Type, ImportLoc, ImportedBy,
-                          getGenerationOrNull(), ExpectedSize, ExpectedModTime,
-                          ExpectedSignature, readASTFileSignature, M, ErrorStr);
+  ModuleManager::AddModuleResult AddResult
+    = ModuleMgr.addModule(FileName, Type, ImportLoc, ImportedBy,
+                          getGeneration(), ExpectedSize, ExpectedModTime,
+                          ExpectedSignature, readASTFileSignature,
+                          M, ErrorStr);
 
   switch (AddResult) {
   case ModuleManager::AlreadyLoaded:
@@ -8604,7 +8605,7 @@ void ASTReader::ReadMethodPool(Selector Sel) {
   // Get the selector generation and update it to the current generation.
   unsigned &Generation = SelectorGeneration[Sel];
   unsigned PriorGeneration = Generation;
-  Generation = getGenerationOrNull();
+  Generation = getGeneration();
   SelectorOutOfDate[Sel] = false;
 
   // Search for methods defined with this selector.
-- 
2.43.5

