From 283249581df63d0c3c44aab962f071345b565053 Mon Sep 17 00:00:00 2001
From: Devajith Valaparambil Sreeramaswamy
 <devajith.valaparambil.sreeramaswamy@cern.ch>
Date: Thu, 31 Oct 2024 09:32:16 +0100
Subject: [PATCH 02/51] Revert "Import various changes to the global module
 index."

This reverts commit 7b336db20a583488928e556f0e136281caaa14b7.
---
 .../clang/Serialization/GlobalModuleIndex.h   |  28 +----
 .../clang/lib/Sema/SemaModule.cpp             |   2 +-
 .../lib/Serialization/GlobalModuleIndex.cpp   | 114 ++++++------------
 3 files changed, 38 insertions(+), 106 deletions(-)

diff --git a/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h b/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
index 2ff0f5845c..93d674e440 100644
--- a/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
+++ b/interpreter/llvm-project/clang/include/clang/Serialization/GlobalModuleIndex.h
@@ -15,16 +15,12 @@
 #ifndef LLVM_CLANG_SERIALIZATION_GLOBALMODULEINDEX_H
 #define LLVM_CLANG_SERIALIZATION_GLOBALMODULEINDEX_H
 
-#include "clang/Basic/FileEntry.h"
-
 #include "llvm/ADT/DenseMap.h"
-#include <llvm/ADT/DenseSet.h>
 #include "llvm/ADT/SmallPtrSet.h"
 #include "llvm/ADT/SmallVector.h"
 #include "llvm/ADT/StringMap.h"
 #include "llvm/ADT/StringRef.h"
 #include "llvm/Support/Error.h"
-#include "llvm/ADT/StringSet.h"
 #include <memory>
 #include <utility>
 
@@ -44,12 +40,6 @@ namespace serialization {
   class ModuleFile;
 }
 
-using llvm::SmallVector;
-using llvm::SmallVectorImpl;
-using llvm::StringRef;
-using llvm::StringSet;
-using serialization::ModuleFile;
-
 /// A global index for a set of module files, providing information about
 /// the identifiers within those module files.
 ///
@@ -62,6 +52,8 @@ using serialization::ModuleFile;
 /// imported, and can be queried to determine which modules the current
 /// translation could or should load to fix a problem.
 class GlobalModuleIndex {
+  using ModuleFile = serialization::ModuleFile;
+
   /// Buffer containing the index file, which is lazily accessed so long
   /// as the global module index is live.
   std::unique_ptr<llvm::MemoryBuffer> Buffer;
@@ -127,9 +119,6 @@ class GlobalModuleIndex {
   GlobalModuleIndex &operator=(const GlobalModuleIndex &) = delete;
 
 public:
-  using UserDefinedInterestingIDs =
-      llvm::StringMap<llvm::SmallVector<OptionalFileEntryRef, 2>>;
-
   ~GlobalModuleIndex();
 
   /// Read a global index file for the given directory.
@@ -147,12 +136,6 @@ public:
   /// The caller accepts ownership of the returned object.
   IdentifierIterator *createIdentifierIterator() const;
 
-  /// Retrieve the set of modules that have up-to-date indexes.
-  ///
-  /// \param ModuleFiles Will be populated with the set of module file namess
-  /// that have been indexed.
-  void getKnownModuleFileNames(StringSet<> &ModuleFiles);
-
   /// Retrieve the set of module files on which the given module file
   /// directly depends.
   void getModuleDependencies(ModuleFile *File,
@@ -172,9 +155,6 @@ public:
   /// \returns true if the identifier is known to the index, false otherwise.
   bool lookupIdentifier(llvm::StringRef Name, HitSet &Hits);
 
-  typedef llvm::SmallDenseSet<llvm::StringRef, 4> FileNameHitSet;
-  bool lookupIdentifier(StringRef Name, FileNameHitSet &Hits);
-
   /// Note that the given module file has been loaded.
   ///
   /// \returns false if the global module index has information about this
@@ -194,11 +174,9 @@ public:
   /// creating modules.
   /// \param Path The path to the directory containing module files, into
   /// which the global index will be written.
-  /// \param Optionally pass already precomputed interesting identifiers.
   static llvm::Error writeIndex(FileManager &FileMgr,
                                 const PCHContainerReader &PCHContainerRdr,
-                                StringRef Path,
-                              UserDefinedInterestingIDs *ExternalIDs = nullptr);
+                                llvm::StringRef Path);
 };
 }
 
diff --git a/interpreter/llvm-project/clang/lib/Sema/SemaModule.cpp b/interpreter/llvm-project/clang/lib/Sema/SemaModule.cpp
index aca62f41c5..ed7f626971 100644
--- a/interpreter/llvm-project/clang/lib/Sema/SemaModule.cpp
+++ b/interpreter/llvm-project/clang/lib/Sema/SemaModule.cpp
@@ -556,7 +556,7 @@ DeclResult Sema::ActOnModuleImport(SourceLocation StartLoc,
 
   VisibleModules.setVisible(Mod, ImportLoc);
 
-  //checkModuleImportContext(*this, Mod, ImportLoc, CurContext);
+  checkModuleImportContext(*this, Mod, ImportLoc, CurContext);
 
   // FIXME: we should support importing a submodule within a different submodule
   // of the same top-level module. Until we do, make it an error rather than
diff --git a/interpreter/llvm-project/clang/lib/Serialization/GlobalModuleIndex.cpp b/interpreter/llvm-project/clang/lib/Serialization/GlobalModuleIndex.cpp
index 011d9a3383..dd4fc3e009 100644
--- a/interpreter/llvm-project/clang/lib/Serialization/GlobalModuleIndex.cpp
+++ b/interpreter/llvm-project/clang/lib/Serialization/GlobalModuleIndex.cpp
@@ -284,13 +284,6 @@ GlobalModuleIndex::readIndex(StringRef Path) {
                         llvm::Error::success());
 }
 
-void GlobalModuleIndex::getKnownModuleFileNames(StringSet<> &ModuleFiles) {
-  ModuleFiles.clear();
-  for (unsigned I = 0, N = Modules.size(); I != N; ++I) {
-    ModuleFiles.insert(Modules[I].FileName);
-  }
-}
-
 void GlobalModuleIndex::getModuleDependencies(
        ModuleFile *File,
        SmallVectorImpl<ModuleFile *> &Dependencies) {
@@ -335,32 +328,6 @@ bool GlobalModuleIndex::lookupIdentifier(StringRef Name, HitSet &Hits) {
   return true;
 }
 
-bool GlobalModuleIndex::lookupIdentifier(StringRef Name, FileNameHitSet &Hits) {
-  Hits.clear();
-
-  // If there's no identifier index, there is nothing we can do.
-  if (!IdentifierIndex)
-    return false;
-
-  // Look into the identifier index.
-  ++NumIdentifierLookups;
-  IdentifierIndexTable &Table =
-      *static_cast<IdentifierIndexTable *>(IdentifierIndex);
-  IdentifierIndexTable::iterator Known = Table.find(Name);
-  if (Known == Table.end()) {
-    return false;
-  }
-
-  SmallVector<unsigned, 2> ModuleIDs = *Known;
-  for (unsigned I = 0, N = ModuleIDs.size(); I != N; ++I) {
-    assert(!Modules[ModuleIDs[I]].FileName.empty());
-    Hits.insert(Modules[ModuleIDs[I]].FileName);
-  }
-
-  ++NumIdentifierLookupHits;
-  return true;
-}
-
 bool GlobalModuleIndex::loadedModuleFile(ModuleFile *File) {
   // Look for the module in the global module index based on the module name.
   StringRef Name = File->ModuleName;
@@ -437,6 +404,9 @@ namespace {
 
   /// Builder that generates the global module index file.
   class GlobalModuleIndexBuilder {
+    FileManager &FileMgr;
+    const PCHContainerReader &PCHContainerRdr;
+
     /// Mapping from files to module file information.
     using ModuleFilesMap = llvm::MapVector<FileEntryRef, ModuleFileInfo>;
 
@@ -475,21 +445,12 @@ namespace {
     }
 
   public:
-    explicit GlobalModuleIndexBuilder(GlobalModuleIndex::UserDefinedInterestingIDs* ExternalIDs) {
-      if (!ExternalIDs)
-        return;
-
-      for (const auto & I : *ExternalIDs)
-        for (auto J : I.getValue())
-          if (J)
-            InterestingIdentifiers[I.getKey()].push_back(
-                getModuleFileInfo(*J).ID);
-    }
+    explicit GlobalModuleIndexBuilder(
+        FileManager &FileMgr, const PCHContainerReader &PCHContainerRdr)
+        : FileMgr(FileMgr), PCHContainerRdr(PCHContainerRdr) {}
 
     /// Load the contents of the given module file into the builder.
-    ///
-    llvm::Error loadModuleFile(FileEntryRef File, FileManager &FileMgr,
-                               const PCHContainerReader &PCHContainerRdr);
+    llvm::Error loadModuleFile(FileEntryRef File);
 
     /// Write the index to the given bitstream.
     /// \returns true if an error occurred, false otherwise.
@@ -561,9 +522,7 @@ namespace {
   };
 }
 
-llvm::Error GlobalModuleIndexBuilder::loadModuleFile(
-    FileEntryRef File, FileManager &FileMgr,
-    const PCHContainerReader &PCHContainerRdr) {
+llvm::Error GlobalModuleIndexBuilder::loadModuleFile(FileEntryRef File) {
   // Open the module file.
 
   auto Buffer = FileMgr.getBufferForFile(File, /*isVolatile=*/true);
@@ -805,8 +764,7 @@ bool GlobalModuleIndexBuilder::writeIndex(llvm::BitstreamWriter &Stream) {
         // Verify Signature.
         return true;
     } else if (Info.StoredSize != File.getSize() ||
-               (Info.StoredModTime &&
-                Info.StoredModTime != File.getModificationTime()))
+               Info.StoredModTime != File.getModificationTime())
       // Verify Size and ModTime.
       return true;
   }
@@ -893,9 +851,7 @@ bool GlobalModuleIndexBuilder::writeIndex(llvm::BitstreamWriter &Stream) {
 llvm::Error
 GlobalModuleIndex::writeIndex(FileManager &FileMgr,
                               const PCHContainerReader &PCHContainerRdr,
-                              StringRef Path,
-                       UserDefinedInterestingIDs *ExternalIDs /* = nullptr */) {
-
+                              StringRef Path) {
   llvm::SmallString<128> IndexPath;
   IndexPath += Path;
   llvm::sys::path::append(IndexPath, IndexFileName);
@@ -919,35 +875,33 @@ GlobalModuleIndex::writeIndex(FileManager &FileMgr,
   }
 
   // The module index builder.
-  GlobalModuleIndexBuilder Builder(ExternalIDs);
-
-  if (!ExternalIDs) {
-    // Load each of the module files.
-    std::error_code EC;
-    for (llvm::sys::fs::directory_iterator D(Path, EC), DEnd;
-         D != DEnd && !EC;
-         D.increment(EC)) {
-      // If this isn't a module file, we don't care.
-      if (llvm::sys::path::extension(D->path()) != ".pcm") {
-        // ... unless it's a .pcm.lock file, which indicates that someone is
-        // in the process of rebuilding a module. They'll rebuild the index
-        // at the end of that translation unit, so we don't have to.
-        if (llvm::sys::path::extension(D->path()) == ".pcm.lock")
-          return llvm::createStringError(std::errc::device_or_resource_busy,
-                                         "someone else is building the index");
+  GlobalModuleIndexBuilder Builder(FileMgr, PCHContainerRdr);
+
+  // Load each of the module files.
+  std::error_code EC;
+  for (llvm::sys::fs::directory_iterator D(Path, EC), DEnd;
+       D != DEnd && !EC;
+       D.increment(EC)) {
+    // If this isn't a module file, we don't care.
+    if (llvm::sys::path::extension(D->path()) != ".pcm") {
+      // ... unless it's a .pcm.lock file, which indicates that someone is
+      // in the process of rebuilding a module. They'll rebuild the index
+      // at the end of that translation unit, so we don't have to.
+      if (llvm::sys::path::extension(D->path()) == ".pcm.lock")
+        return llvm::createStringError(std::errc::device_or_resource_busy,
+                                       "someone else is building the index");
 
-        continue;
-      }
+      continue;
+    }
 
-      // If we can't find the module file, skip it.
-      auto ModuleFile = FileMgr.getOptionalFileRef(D->path());
-      if (!ModuleFile)
-        continue;
+    // If we can't find the module file, skip it.
+    auto ModuleFile = FileMgr.getOptionalFileRef(D->path());
+    if (!ModuleFile)
+      continue;
 
-      // Load this module file.
-      if (auto Err = Builder.loadModuleFile(*ModuleFile, FileMgr, PCHContainerRdr))
-        return Err;
-    }
+    // Load this module file.
+    if (llvm::Error Err = Builder.loadModuleFile(*ModuleFile))
+      return Err;
   }
 
   // The output buffer, into which the global index will be written.
-- 
2.43.5

