From 7237cf111ff6ee629066982c559a854999fb181d Mon Sep 17 00:00:00 2001
From: Devajith Valaparambil Sreeramaswamy
 <devajith.valaparambil.sreeramaswamy@cern.ch>
Date: Thu, 31 Oct 2024 09:32:21 +0100
Subject: [PATCH 49/52] Revert "Remove macro and print macro."

This reverts commit b96ebb04a2087af470ff27e5f4b1749c7fe2c102.
---
 .../clang/include/clang/Lex/Preprocessor.h    | 11 ------
 .../clang/lib/Lex/PPMacroExpansion.cpp        | 14 -------
 .../clang/lib/Lex/Preprocessor.cpp            | 37 -------------------
 3 files changed, 62 deletions(-)

diff --git a/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h b/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
index 4517950827..b0a8ec0fec 100644
--- a/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
+++ b/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h
@@ -1417,11 +1417,6 @@ public:
     return appendDefMacroDirective(II, MI, MI->getDefinitionLoc());
   }
 
-  /// Remove a IdentifierInfo and MacroDirective from the history.
-  /// Given an IdentifierInfo and a MacroDirective we can remove them from
-  /// the macros vector.
-  void removeMacro(IdentifierInfo *II, MacroDirective *MD);
-
   /// Set a MacroDirective that was loaded from a PCH file.
   void setLoadedMacroDirective(IdentifierInfo *II, MacroDirective *ED,
                                MacroDirective *MD);
@@ -2188,12 +2183,6 @@ public:
   void DumpMacro(const MacroInfo &MI) const;
   void dumpMacroInfo(const IdentifierInfo *II);
 
-  /// Print a Macro to an ostream used for ClangInternalState
-  /// Same as dump, but without orinting source location.
-  void printMacros(raw_ostream &OS) const;
-  void printMacro(const IdentifierInfo* II, const MacroDirective *MD,
-                  llvm::raw_ostream &OS) const;
-
   /// Given a location that specifies the start of a
   /// token, return a new location that specifies a character within the token.
   SourceLocation AdvanceToTokenCharacter(SourceLocation TokStart,
diff --git a/interpreter/llvm-project/clang/lib/Lex/PPMacroExpansion.cpp b/interpreter/llvm-project/clang/lib/Lex/PPMacroExpansion.cpp
index 84050883d8..ad02f31209 100644
--- a/interpreter/llvm-project/clang/lib/Lex/PPMacroExpansion.cpp
+++ b/interpreter/llvm-project/clang/lib/Lex/PPMacroExpansion.cpp
@@ -93,20 +93,6 @@ void Preprocessor::appendMacroDirective(IdentifierInfo *II, MacroDirective *MD){
     II->setChangedSinceDeserialization();
 }
 
-void Preprocessor::removeMacro(IdentifierInfo *II, MacroDirective *MD) {
-  assert(II && MD);
-  II->setHasMacroDefinition(false);
-  CurSubmoduleState->Macros.erase(II);
-  if (MacroDirective* prevMD = MD->getPrevious()) {
-    // Avoid assertion in appendMacroDirective.
-    MacroDirective* prevPrevMD = prevMD->getPrevious();
-    prevMD->setPrevious(0);
-    appendMacroDirective(II, prevMD);
-    prevMD->setPrevious(prevPrevMD);
-  }
-}
-
-
 void Preprocessor::setLoadedMacroDirective(IdentifierInfo *II,
                                            MacroDirective *ED,
                                            MacroDirective *MD) {
diff --git a/interpreter/llvm-project/clang/lib/Lex/Preprocessor.cpp b/interpreter/llvm-project/clang/lib/Lex/Preprocessor.cpp
index 3e87b5c210..7fdb5d4c0d 100644
--- a/interpreter/llvm-project/clang/lib/Lex/Preprocessor.cpp
+++ b/interpreter/llvm-project/clang/lib/Lex/Preprocessor.cpp
@@ -270,43 +270,6 @@ void Preprocessor::DumpMacro(const MacroInfo &MI) const {
   llvm::errs() << "\n";
 }
 
-void Preprocessor::printMacros(raw_ostream &OS) const {
-  for (macro_iterator I = macro_begin(), E = macro_end(); I != E; ++I) {
-    Preprocessor::printMacro(I->first, I->second.getLatest(), OS);
-  }
-}
-
-void Preprocessor::printMacro(const IdentifierInfo* II,const MacroDirective *MD,
-                              llvm::raw_ostream &OS) const {
-  OS << "<MD: " << MD << ">";
-  OS << II->getName() << " ";
-  OS << "(Tokens:)";
-  const MacroInfo* MI = MD->getMacroInfo();
-  for (unsigned i = 0, e = MI->getNumTokens(); i != e; ++i) {
-    const Token &Tok = MI->getReplacementToken(i);
-    OS << tok::getTokenName(Tok.getKind()) << " '"
-       << getSpelling(Tok) << "'";
-    OS << "\t";
-    if (Tok.isAtStartOfLine())
-      OS << " [StartOfLine]";
-    if (Tok.hasLeadingSpace())
-      OS << " [LeadingSpace]";
-    if (Tok.isExpandDisabled())
-      OS << " [ExpandDisabled]";
-    if (Tok.needsCleaning()) {
-      const char *Start = SourceMgr.getCharacterData(Tok.getLocation());
-      OS << " [UnClean='" << StringRef(Start, Tok.getLength())
-         << "']";
-    }
-    //Do not print location it uses the SourceManager dump to llvm::errs.
-    OS << "\tLoc=<";
-    Tok.getLocation().print(OS, SourceMgr);
-    OS << ">";
-    OS << "  ";
-  }
-  OS << "\n";
-}
-
 void Preprocessor::PrintStats() {
   llvm::errs() << "\n*** Preprocessor Stats:\n";
   llvm::errs() << NumDirectives << " directives found:\n";
-- 
2.43.5

